{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0",
    "title": "Mock Shop",
    "description": "<strong>Mock Shop is a simple shopping server API</strong>",
    "contact": {
      "email": "adelekegbolahan92@gmail.com"
    }
  },
  "servers": [
    {
      "url": "{protocol}://mock-mall.herokuapp.com/api/v1",
      "variables": {
        "protocol": {
          "enum": [
            "http",
            "https"
          ],
          "default": "https"
        }
      }
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "summary": "Signup",
        "description": "Creates a new user",
        "tags": [
          "Users"
        ],
        "operationId": "createUser",
        "deprecated": false,
        "requestBody": {
          "description": "A JSON object that contains the user details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New user is created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "description": "Email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conflict"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "summary": "Log in",
        "description": "A route for users to login",
        "tags": [
          "Users"
        ],
        "operationId": "loginUser",
        "deprecated": false,
        "requestBody": {
          "description": "A JSON object that contains the user login details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupSuccess"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "description": "Invalid details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/wrongData"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/products": {
      "post": {
        "description": "A route for the admin to create a product. The admin has been seeded into the database. contact the developer [GitHub](https://github.com/uthdev/Way-Farer) for access to this route.",
        "summary": "Add product",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "operationId": "ProductsPost",
        "deprecated": false,
        "requestBody": {
          "description": "A JSON object that contains the product details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createEditProduct"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "get": {
        "description": "A route to get all products. Both user and admin can get all products",
        "summary": "Get all products",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "operationId": "ProductsGet",
        "deprecated": false,
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAll"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "description": "A route to get a single product. Both user and admin can access this route",
        "summary": "Get a single product",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "operationId": "GetSingleProduct",
        "deprecated": false,
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "put": {
        "description": "An admin route to edit a product information. Accessible to only admin",
        "summary": "Update a product",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "operationId": "EditProduct",
        "deprecated": false,
        "requestBody": {
          "description": "A JSON object that contains the product details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createEditProduct"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "description": "An Admin route to delete a product",
        "summary": "Delete a product",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "operationId": "DeleteProduct",
        "deprecated": false,
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/carts": {
      "post": {
        "summary": "Add product to cart",
        "description": "A user route to add product to cart",
        "tags": [
          "Carts"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "operationId": "AddToCart",
        "deprecated": false,
        "requestBody": {
          "description": "A JSON object that contains the productId",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToCartRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "get": {
        "description": "A route to get user cart. A user can see all product in his/her cart",
        "summary": "Get user cart",
        "tags": [
          "Carts"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "operationId": "GetCarts",
        "deprecated": false,
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetAll"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/carts/{productId}": {
      "delete": {
        "description": "A route for user to delete a product from his/her cart.",
        "summary": "Delete a cart product",
        "tags": [
          "Carts"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "operationId": "DeleteCartProduct",
        "deprecated": false,
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product ID of the cart item to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "Success": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Success"
            }
          }
        }
      },
      "GetAll": {
        "description": "Find All",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetAll"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequest"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedError"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServerError": {
        "description": "Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServerError"
            }
          }
        }
      }
    },
    "schemas": {
      "SignupRequest": {
        "title": "Signup Request",
        "example": {
          "email": "Johndoe@email.com",
          "firstName": "John",
          "lastName": "Doe",
          "password": "pass1234"
        },
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "firstName",
          "lastName",
          "password"
        ]
      },
      "SigninRequest": {
        "title": "Signin Request",
        "example": {
          "email": "Johndoe@email.com",
          "password": "pass1234"
        },
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AddToCartRequest": {
        "title": "Add to Cart",
        "example": {
          "productId": 2
        },
        "type": "object",
        "properties": {
          "productId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "productId"
        ]
      },
      "Success": {
        "title": "OK",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "object",
            "example": {}
          }
        }
      },
      "GetAll": {
        "title": "Get All Specified resource",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "array",
            "items": {
              "example": {}
            }
          }
        }
      },
      "SignupSuccess": {
        "title": "Signup Success",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "email": {
                "type": "string",
                "example": "johndoe@email.com"
              },
              "firstName": {
                "type": "string",
                "example": "John"
              },
              "lastName": {
                "type": "string",
                "example": "Doe"
              },
              "isAdmin": {
                "type": "boolean",
                "example": false
              },
              "token": {
                "type": "string",
                "example": "knsd9435n.90jk34589kjs897345.asdf987234nk8f9as"
              },
              "updatedAt": {
                "type": "string",
                "example": "2020-02-13T10:36:40.835Z"
              },
              "createdAt": {
                "type": "string",
                "example": "2020-02-13T10:36:40.835Z"
              }
            }
          }
        }
      },
      "createEditProduct": {
        "title": "Create Product Request",
        "example": {
          "name": "A song of fire and ice",
          "description": "A book on which the legendary HBO tvseries Game of Thrones was based.",
          "category": "books",
          "price": 5000,
          "imageUrl": "http://mock-shop.com/song-fire-ice-2.jpeg",
          "inStock": true
        },
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "imageUrl": {
            "type": "string"
          },
          "inStock": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "description",
          "category",
          "price",
          "imageUrl",
          "inStock"
        ]
      },
      "wrongData": {
        "title": "Invalid data",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "string",
            "example": "Invalid email or password"
          }
        }
      },
      "UnauthorizedError": {
        "title": "noAuth",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "string",
            "example": "Authorization token required"
          }
        }
      },
      "Conflict": {
        "title": "Conflict",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "string",
            "example": "This email address is already registered"
          }
        }
      },
      "Error": {
        "title": "Non Existing Resource",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "BadRequest": {
        "title": "Bad Request",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "object",
            "properties": {
              "data": {
                "example": [
                  "The data field is required"
                ]
              }
            }
          }
        }
      },
      "ServerError": {
        "title": "Internal Error",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "string",
            "example": "Internal Server Error. Please try again"
          }
        }
      }
    }
  }
}